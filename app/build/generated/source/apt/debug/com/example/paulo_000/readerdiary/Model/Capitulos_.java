
package com.example.paulo_000.readerdiary.Model;

import com.example.paulo_000.readerdiary.Model.CapitulosCursor.Factory;

import io.objectbox.EntityInfo;
import io.objectbox.Property;
import io.objectbox.annotation.apihint.Internal;
import io.objectbox.internal.CursorFactory;
import io.objectbox.internal.IdGetter;
import io.objectbox.relation.RelationInfo;
import io.objectbox.relation.ToOne;
import io.objectbox.internal.ToOneGetter;


// THIS CODE IS GENERATED BY ObjectBox, DO NOT EDIT.

/**
 * Properties for entity "Capitulos". Can be used for QueryBuilder and for referencing DB names.
 */
public final class Capitulos_ implements EntityInfo<Capitulos> {

    // Leading underscores for static constants to avoid naming conflicts with property names

    public static final String __ENTITY_NAME = "Capitulos";

    public static final int __ENTITY_ID = 4;

    public static final Class<Capitulos> __ENTITY_CLASS = Capitulos.class;

    public static final String __DB_NAME = "Capitulos";

    public static final CursorFactory<Capitulos> __CURSOR_FACTORY = new Factory();

    @Internal
    static final CapitulosIdGetter __ID_GETTER = new CapitulosIdGetter();

    public final static Property id = new Property(0, 1, long.class, "id", true, "id");
    public final static Property titulo = new Property(1, 2, String.class, "titulo");
    public final static Property capNum = new Property(2, 6, int.class, "capNum");
    public final static Property comentario = new Property(3, 3, String.class, "comentario");
    public final static Property livroId = new Property(4, 5, long.class, "livroId");

    public final static Property[] __ALL_PROPERTIES = {
        id,
        titulo,
        capNum,
        comentario,
        livroId
    };

    public final static Property __ID_PROPERTY = id;

    public final static Capitulos_ __INSTANCE = new Capitulos_();

    @Override
    public String getEntityName() {
        return __ENTITY_NAME;
    }

    @Override
    public int getEntityId() {
        return __ENTITY_ID;
    }

    @Override
    public Class<Capitulos> getEntityClass() {
        return __ENTITY_CLASS;
    }

    @Override
    public String getDbName() {
        return __DB_NAME;
    }

    @Override
    public Property[] getAllProperties() {
        return __ALL_PROPERTIES;
    }

    @Override
    public Property getIdProperty() {
        return __ID_PROPERTY;
    }

    @Override
    public IdGetter<Capitulos> getIdGetter() {
        return __ID_GETTER;
    }

    @Override
    public CursorFactory<Capitulos> getCursorFactory() {
        return __CURSOR_FACTORY;
    }

    @Internal
    static final class CapitulosIdGetter implements IdGetter<Capitulos> {
        @Override
        public long getId(Capitulos object) {
            return object.getId();
        }
    }

    /** To-one relation "livro" to target entity "Livro". */
    public static final RelationInfo<Livro> livro =
            new RelationInfo<>(Capitulos_.__INSTANCE, Livro_.__INSTANCE, null, new ToOneGetter<Capitulos>() {
                @Override
                public ToOne<Livro> getToOne(Capitulos entity) {
                    return entity.getLivro();
                }
            });

}
